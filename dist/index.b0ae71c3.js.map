{"mappings":"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","sources":["src/scripts/main.ts"],"sourcesContent":["console.log('Run Main Script');\nconst timeout = async (time): Promise<void> => await new Promise(resolve => setTimeout(resolve, time));\n\nclass GameBuilder {\n    startButton: HTMLElement;\n    gameWrapper: HTMLElement;\n    gameWidthInput: HTMLInputElement;\n    gameHeightInput: HTMLInputElement;\n    gameFpsInput: HTMLInputElement;\n\n    startGame = false;\n    gameTableCurrent: Array<Array<0 | 1>> = [];\n    nextGameTable: Array<Array<0 | 1>> = [];\n    fps = 20;\n\n    constructor(private size: { width: number, height: number }) {\n        this.startButton = document.querySelector('#start-game');\n        this.gameWidthInput = document.querySelector('#width');\n        this.gameHeightInput = document.querySelector('#height');\n        this.gameFpsInput = document.querySelector('#fps');\n\n        this.gameWrapper = document.querySelector('.game-wrapper');\n\n        this.startButton.addEventListener('click', () => {\n            this.startGame = !this.startGame;\n            this.startButton.innerText = this.startGame === false ? 'Start' : 'Stop';\n            this.runGame();\n        });\n\n        this.gameWidthInput.addEventListener('change', (event) => {\n            this.size.width = parseInt(event.target.value);\n            this.init()\n        })\n\n        this.gameHeightInput.addEventListener('change', (event) => {\n            this.size.height = parseInt(event.target.value);\n            this.init()\n        })\n\n        this.gameFpsInput.addEventListener('change', (event) => {\n            this.fps = parseInt(event.target.value);\n            this.init()\n        })\n    }\n\n    init = (): void => {\n        this.initGameTable();\n        this.createBoard();\n    };\n\n    initGameTable = (): void => {\n        this.gameTableCurrent = [];\n        for (let i = 1; i <= this.size.height; i++) {\n            const row = [];\n            for (let j = 1; j <= this.size.width; j++) {\n                row.push(0);\n            }\n            this.gameTableCurrent.push(row);\n        }\n    };\n\n    createBoard = async (): Promise<void> => {\n        this.gameWrapper.innerHTML = '';\n        const cellWidth = Math.floor(this.gameWrapper.clientWidth / this.size.width);\n        const cellHeight = Math.floor(this.gameWrapper.clientHeight / this.size.height);\n\n        this.gameTableCurrent.forEach((rowItems, rowIndex) => {\n            const row = document.createElement('div');\n            row.classList.add('row');\n            row.setAttribute('row', `${rowIndex}`)\n            rowItems.forEach((cellValue, cellIndex) => {\n                const cell = document.createElement('div');\n                cell.classList.add('cell');\n                cell.id = `${rowIndex}-${cellIndex}`;\n                cell.style.width = `${cellWidth}px`;\n                cell.style.height = `${cellHeight}px`;\n                row.appendChild(cell);\n                cell.addEventListener('click', this.onClickCellHandler);\n            });\n            this.gameWrapper.appendChild(row)\n        });\n\n    };\n\n\n    onClickCellHandler = (event): void => {\n        const cellHtml: HTMLElement = event.target;\n        const cellAddress = cellHtml.id.split('-');\n        const cellAddressY = cellAddress[0];\n        const cellAddressX = cellAddress[1];\n\n        if (cellHtml.classList.contains('active')) {\n            cellHtml.classList.remove('active');\n            if (this.startGame === true) {\n                this.nextGameTable[cellAddressY][cellAddressX] = 0;\n            } else {\n                this.gameTableCurrent[cellAddressY][cellAddressX] = 0;\n\n            }\n\n        } else {\n            cellHtml.classList.add('active');\n            if (this.startGame === true) {\n                this.nextGameTable[cellAddressY][cellAddressX] = 1;\n            } else {\n                this.gameTableCurrent[cellAddressY][cellAddressX] = 1;\n\n            }\n        }\n    };\n\n    runGame = async () => {\n        while (this.startGame === true) {\n            this.nextGameTable = JSON.parse(JSON.stringify(this.gameTableCurrent))\n\n            this.gameTableCurrent.forEach( (rowItem, rowIndex) => {\n                rowItem.forEach( (cellItem, cellIndex) => {\n                    const cellY = rowIndex;\n                    const cellX = cellIndex;\n                    const cell = document.getElementById(`${cellY}-${cellX}`);\n                    this.gameTableCurrent[cellY][cellX] === 0 ? cell.classList.remove('active') : cell.classList.add('active');\n                    const neighborhoodItems = this.getNeighborhood(cellY, cellX);\n                    const activeNeighborhoods = neighborhoodItems.filter(address =>  this.gameTableCurrent[address[0]][address[1]] !== 0);\n\n                    if (this.gameTableCurrent[cellY][cellX] === 1) {\n                        if (activeNeighborhoods.length < 2 ) {\n                            this.nextGameTable[cellY][cellX] = 0;\n                        } else if (activeNeighborhoods.length === 2 || activeNeighborhoods.length === 3) {\n                            this.nextGameTable[cellY][cellX] = 1;\n                        }else if (activeNeighborhoods.length > 3) {\n                            this.nextGameTable[cellY][cellX] = 0;\n                        }\n                    } else {\n                        if (activeNeighborhoods.length === 3) {\n                            this.nextGameTable[cellY][cellX] = 1;\n                        }\n                    }\n                })\n            })\n\n            await timeout(Math.floor(1000 / this.fps));\n            this.gameTableCurrent = this.nextGameTable;\n        }\n\n    };\n\n    getNeighborhood = (y: number, x: number): Array<Array<number>> => {\n        const topLeft = y === 0 || x === 0 ? null : [y - 1, x - 1];\n        const top = y === 0 ? null : [y - 1, x];\n        const topRight = y === 0 || x === this.size.height - 1 ? null : [y - 1, x + 1];\n        const right = x === this.size.width - 1 ? null : [y, x + 1];\n        const left = x === 0 ? null : [y, x - 1];\n        const bottomLeft = y === this.size.height - 1 || x === 0 ? null : [y + 1, x - 1];\n        const bottom = y === this.size.height - 1 ? null : [y + 1, x];\n        const bottomRight = y === this.size.height - 1 || x === this.size.width - 1 ? null : [y + 1, x + 1];\n        return [topLeft, top, topRight, right, left, bottomLeft, bottom, bottomRight].filter(item => item !== null);\n    };\n}\n\nconst game = new GameBuilder({width: 60, height: 60});\ngame.init();\n\n\n\n"],"names":["console","log","$1ccc8d3c866b7484$var$timeout","async","time","Promise","resolve","setTimeout","size","this","startGame","gameTableCurrent","nextGameTable","fps","init","initGameTable","createBoard","i","height","row","j","width","push","gameWrapper","innerHTML","cellWidth","Math","floor","clientWidth","cellHeight","clientHeight","forEach","rowItems","rowIndex","document","createElement","classList","add","setAttribute","cellValue","cellIndex","cell","id","style","appendChild","addEventListener","onClickCellHandler","event","cellHtml","target","cellAddress","split","cellAddressY","cellAddressX","contains","remove","runGame","JSON","parse","stringify","rowItem","cellItem","cellY","cellX","getElementById","activeNeighborhoods","getNeighborhood","filter","address","length","y","x","item","startButton","querySelector","gameWidthInput","gameHeightInput","gameFpsInput","innerText","parseInt","value"],"version":3,"file":"index.b0ae71c3.js.map"}